export interface AICommand {
  action: string;
  response: string;
  details: string;
  needsConfirmation: boolean;
  result?: any;
}

interface CommandPattern {
  pattern: RegExp;
  action: string;
  handler: (match: RegExpMatchArray, input: string) => AICommand;
}

export class AIService {
  private static commands: CommandPattern[] = [
    // Ordens de Servi√ßo
    {
      pattern: /(?:criar|nova|gerar)\s*(?:ordem|os|servi√ßo|servico)\s*(?:para|do|da)?\s*([a-zA-Z\s]+)(?:\s*-?\s*(.+))?/i,
      action: "Criar Ordem de Servi√ßo",
      handler: (match, input) => ({
        action: "Ordem de servi√ßo criada",
        response: `‚úÖ Criando ordem de servi√ßo para **${match[1].trim()}**${match[2] ? ` - ${match[2].trim()}` : ''}.\n\nüìã **Detalhes:**\n‚Ä¢ Cliente: ${match[1].trim()}\n‚Ä¢ Servi√ßo: ${match[2]?.trim() || 'A ser definido'}\n‚Ä¢ Status: Pendente\n‚Ä¢ Data: ${new Date().toLocaleDateString()}`,
        details: `Nova OS para ${match[1].trim()}`,
        needsConfirmation: true,
        result: {
          type: 'service_order',
          customer: match[1].trim(),
          service: match[2]?.trim() || '',
          status: 'pending',
          date: new Date().toISOString()
        }
      })
    },

    // Cadastro de Produtos
    {
      pattern: /(?:cadastrar|adicionar|criar)\s*(?:produto|item)\s*(.+?)(?:\s*(?:por|valor|pre√ßo|preco)\s*(?:r\$)?\s*(\d+(?:,\d{2})?))?/i,
      action: "Cadastrar Produto",
      handler: (match, input) => {
        const price = match[2] ? parseFloat(match[2].replace(',', '.')) : 0;
        return {
          action: "Produto cadastrado",
          response: `‚úÖ Cadastrando produto **${match[1].trim()}**.\n\nüè∑Ô∏è **Detalhes:**\n‚Ä¢ Nome: ${match[1].trim()}\n‚Ä¢ Pre√ßo: R$ ${price.toFixed(2).replace('.', ',')}\n‚Ä¢ Categoria: Produtos\n‚Ä¢ Status: Ativo`,
          details: `Produto ${match[1].trim()} adicionado`,
          needsConfirmation: true,
          result: {
            type: 'product',
            name: match[1].trim(),
            price: price,
            category: 'Produtos',
            status: 'active'
          }
        };
      }
    },

    // Cadastro de Servi√ßos
    {
      pattern: /(?:cadastrar|adicionar|criar)\s*(?:servi√ßo|servico)\s*(.+?)(?:\s*(?:por|valor|pre√ßo|preco)\s*(?:r\$)?\s*(\d+(?:,\d{2})?))?/i,
      action: "Cadastrar Servi√ßo",
      handler: (match, input) => {
        const price = match[2] ? parseFloat(match[2].replace(',', '.')) : 0;
        return {
          action: "Servi√ßo cadastrado",
          response: `‚úÖ Cadastrando servi√ßo **${match[1].trim()}**.\n\nüîß **Detalhes:**\n‚Ä¢ Nome: ${match[1].trim()}\n‚Ä¢ Pre√ßo: R$ ${price.toFixed(2).replace('.', ',')}\n‚Ä¢ Categoria: Servi√ßos\n‚Ä¢ Status: Ativo`,
          details: `Servi√ßo ${match[1].trim()} adicionado`,
          needsConfirmation: true,
          result: {
            type: 'service',
            name: match[1].trim(),
            price: price,
            category: 'Servi√ßos',
            status: 'active'
          }
        };
      }
    },

    // Finalizar Venda
    {
      pattern: /(?:finalizar|fechar|concluir)\s*(?:venda|pedido)\s*(?:para|do|da)?\s*([a-zA-Z\s]+)(?:\s*(?:valor|total)\s*(?:r\$)?\s*(\d+(?:,\d{2})?))?/i,
      action: "Finalizar Venda",
      handler: (match, input) => {
        const total = match[2] ? parseFloat(match[2].replace(',', '.')) : 0;
        return {
          action: "Venda finalizada",
          response: `‚úÖ Finalizando venda para **${match[1].trim()}**.\n\nüí∞ **Resumo:**\n‚Ä¢ Cliente: ${match[1].trim()}\n‚Ä¢ Total: R$ ${total.toFixed(2).replace('.', ',')}\n‚Ä¢ Forma de pagamento: A definir\n‚Ä¢ Data: ${new Date().toLocaleDateString()}`,
          details: `Venda finalizada para ${match[1].trim()}`,
          needsConfirmation: true,
          result: {
            type: 'sale',
            customer: match[1].trim(),
            total: total,
            date: new Date().toISOString(),
            status: 'completed'
          }
        };
      }
    },

    // Cadastrar Cliente
    {
      pattern: /(?:cadastrar|adicionar|criar)\s*(?:cliente|customer)\s*(.+?)(?:\s*(?:telefone|tel|fone)\s*([0-9\s\(\)\-]+))?/i,
      action: "Cadastrar Cliente",
      handler: (match, input) => ({
        action: "Cliente cadastrado",
        response: `‚úÖ Cadastrando cliente **${match[1].trim()}**.\n\nüë§ **Detalhes:**\n‚Ä¢ Nome: ${match[1].trim()}\n‚Ä¢ Telefone: ${match[2]?.trim() || 'N√£o informado'}\n‚Ä¢ Status: Ativo\n‚Ä¢ Data de cadastro: ${new Date().toLocaleDateString()}`,
        details: `Cliente ${match[1].trim()} adicionado`,
        needsConfirmation: true,
        result: {
          type: 'customer',
          name: match[1].trim(),
          phone: match[2]?.trim() || '',
          status: 'active',
          registrationDate: new Date().toISOString()
        }
      })
    },

    // Gerar Relat√≥rio
    {
      pattern: /(?:gerar|criar|mostrar)\s*(?:relat√≥rio|relatorio)\s*(?:de|do)?\s*(vendas|clientes|produtos|servi√ßos|servicos|financeiro)?/i,
      action: "Gerar Relat√≥rio",
      handler: (match, input) => {
        const reportType = match[1]?.toLowerCase() || 'geral';
        return {
          action: "Relat√≥rio gerado",
          response: `üìä Gerando relat√≥rio de **${reportType}**.\n\nüìà **Informa√ß√µes:**\n‚Ä¢ Tipo: Relat√≥rio de ${reportType}\n‚Ä¢ Per√≠odo: √öltimo m√™s\n‚Ä¢ Status: Processando\n‚Ä¢ Formato: PDF/Excel`,
          details: `Relat√≥rio de ${reportType} gerado`,
          needsConfirmation: true,
          result: {
            type: 'report',
            category: reportType,
            period: 'last_month',
            format: 'pdf'
          }
        };
      }
    },

    // Buscar informa√ß√µes
    {
      pattern: /(?:buscar|procurar|encontrar|listar)\s*(.+)/i,
      action: "Buscar Informa√ß√µes",
      handler: (match, input) => ({
        action: "Busca realizada",
        response: `üîç Buscando por **${match[1].trim()}**.\n\nüìã **Resultados encontrados:**\n‚Ä¢ Verificando base de dados...\n‚Ä¢ Aplicando filtros...\n‚Ä¢ Ordenando resultados...`,
        details: `Busca por ${match[1].trim()}`,
        needsConfirmation: true,
        result: {
          type: 'search',
          query: match[1].trim(),
          results: []
        }
      })
    }
  ];

  static async processCommand(input: string): Promise<AICommand> {
    const normalizedInput = input.trim();

    // Procura por padr√µes conhecidos
    for (const command of this.commands) {
      const match = normalizedInput.match(command.pattern);
      if (match) {
        return command.handler(match, normalizedInput);
      }
    }

    // Se n√£o encontrou padr√£o espec√≠fico, resposta gen√©rica
    return {
      action: "Comando n√£o reconhecido",
      response: `ü§î N√£o consegui entender completamente seu comando: "${normalizedInput}"\n\nüí° **Experimente comandos como:**\n‚Ä¢ "Criar ordem de servi√ßo para Jo√£o"\n‚Ä¢ "Cadastrar produto iPhone 15 por R$ 3000"\n‚Ä¢ "Finalizar venda para Maria valor R$ 150"\n‚Ä¢ "Cadastrar cliente Pedro telefone (11) 99999-9999"\n‚Ä¢ "Gerar relat√≥rio de vendas"`,
      details: "Comando n√£o reconhecido",
      needsConfirmation: false
    };
  }

  // M√©todo para executar a√ß√µes reais no sistema
  static async executeCommand(command: AICommand): Promise<boolean> {
    try {
      switch (command.result?.type) {
        case 'service_order':
          // Integrar com sistema de ordens de servi√ßo
          console.log('Criando ordem de servi√ßo:', command.result);
          break;
        
        case 'product':
        case 'service':
          // Integrar com sistema de produtos/servi√ßos
          console.log('Cadastrando item:', command.result);
          break;
        
        case 'sale':
          // Integrar com sistema de vendas
          console.log('Finalizando venda:', command.result);
          break;
        
        case 'customer':
          // Integrar com sistema de clientes
          console.log('Cadastrando cliente:', command.result);
          break;
        
        case 'report':
          // Integrar com sistema de relat√≥rios
          console.log('Gerando relat√≥rio:', command.result);
          break;
        
        case 'search':
          // Integrar com sistema de busca
          console.log('Realizando busca:', command.result);
          break;
        
        default:
          console.log('Comando gen√©rico:', command);
      }
      
      return true;
    } catch (error) {
      console.error('Erro ao executar comando:', error);
      return false;
    }
  }
}